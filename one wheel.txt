#include<windows.h>
#include<math.h>
#ifdef APPLE
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#define PI 3.1416
#include <stdlib.h>
float cx=1;
float ca=1;
void init()
{
    glClearColor(0,0,0,0);
    glOrtho(-5,5,-5,5,-5,5);
}
void circle(float radiusX, float radiusY)
{
    int i;
    float angle = 0.0;
    glBegin(GL_POLYGON);
        for(i=0;i<100;i++){
            angle = 2*PI*i/100;
            glVertex2f(radiusX*cos(angle),radiusY*sin(angle));

        }
        glEnd();
}
void myDisplay()
{
    glClear(GL_COLOR_BUFFER_BIT);

    glPushMatrix();

        glScaled(0.5,0.5,1);
        glTranslated(3+cx,0,0);
        glColor3f(1.0f,0.0f,0.0f);
        glRotated(ca,0,0,-1);
        circle(1,1);
        glBegin(GL_LINES);
            glColor3f(0.0f,1.0f,0.0f);
            glVertex2d(0,0);
            glVertex2d(0,1);
            glColor3f(1.0f,1.0f,0.0f);
            glVertex2d(0,0);
            glVertex2d(0,-1);
        glEnd();
    glPopMatrix();
 glFlush();
}
void wheelMoveForward()
{
    cx = cx+0.001;
    ca = ca+0.5;
    glutPostRedisplay();
}

void wheelMoveBackward()
{
    ca = ca-0.5;
    cx = cx-0.001;
    glutPostRedisplay();
}
/*void wheelMoverRight() {
    cPosition = cPosition+0.01;
    if(cPosition > 6) {
        cPosition = -6;
    }
    glutPostRedisplay();
}*/
void specialkey(int key, int x, int y)
{
    switch(key){
    case GLUT_KEY_DOWN:
        break;
    case GLUT_KEY_UP:
        break;
    case GLUT_KEY_LEFT:
        glutIdleFunc(wheelMoveBackward);
        break;
    case GLUT_KEY_RIGHT:
        glutIdleFunc(wheelMoveForward);
        break;
    default:
        break;
    }
}





int main()
{
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(600,600);
    glutInitWindowPosition(50,50);
    glutCreateWindow("Simple Line");
    init();
    glutDisplayFunc(myDisplay);
    glutSpecialFunc(specialkey);
    glutMainLoop();

    return 0;
}
